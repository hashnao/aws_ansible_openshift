- name: Installation and Configuration of Metrics
  hosts: masters
  gather_facts: no
  tasks:

  # make sure that we are using the default user (system:admin) and the default project
  - name: Change the oc context
    command: "oc login -u system:admin"

  - name: Change to the openshift-infra project
    command: "oc project openshift-infra"

  - name: Force metrics components into region=infra
    command: oc patch namespace/openshift-infra -p '{"metadata":{"annotations":{"openshift.io/node-selector":"region=infra"}}}'

  - name: Check for metrics-deployer service account
    command: oc get sa metrics-deployer
    register: metrics_deployer_sa_out
    ignore_errors: true

  - name: Create the metrics-deployer service account
    shell: 'echo ''{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"name":"metrics-deployer"},"secrets":[{"name":"metrics-deployer"}]}'' | oc create -f -'
    when: metrics_deployer_sa_out | failed

  - name: Wait for the metrics-deployer secrets
    shell: "oc get secrets | grep metrics-deployer-token"
    register: metrics_token_out
    until: metrics_token_out | success
    retries: 15
    delay: 10

  - name: Grant the edit role to the metrics-deployer service account
    command: oadm policy add-role-to-user edit system:serviceaccount:openshift-infra:metrics-deployer

  - name: Grant the cluster-reader role to the heapster service account
    command: oadm policy add-cluster-role-to-user cluster-reader system:serviceaccount:openshift-infra:heapster

  - name: Check for metrics-deployer secret
    command: "oc get secret metrics-deployer"
    register: metrics_deployer_secret_out
    ignore_errors: true

  - name: Create the null metrics-deployer secret
    command: oc secrets new metrics-deployer nothing=/dev/null
    when: metrics_deployer_secret_out | failed

  # if the artifacts are already deployed, don't process the deployer template
  - name: Check for the deployed artifacts
    command: oc get rc hawkular-metrics
    register: metrics_artifacts_out
    ignore_errors: true

  - name: Instantiate the logging deployer via the template
    shell: >
      oc process metrics-deployer-template -n openshift
      -v CASSANDRA_PV_SIZE=10Gi
      -v USE_PERSISTENT_STORAGE=true
      -v HAWKULAR_METRICS_HOSTNAME=hawkular-metrics.cloudapps.test-ml.sborenst.opentlc.com | oc create -f -
    when: metrics_artifacts_out | failed

  - name: Wait for the deployer to finish
    script: files/check_pod_complete.sh 'metrics-deployer-[a-zA-Z0-9]*'
    register: check_out
    until: check_out | success
    retries: 15
    delay: 10

  - name: Wait for the hawkular-cassandra-1 RC to exist
    command: oc get rc hawkular-cassandra-1
    register: rc_out
    until: rc_out.stdout | search("hawkular-cassandra-1")
    retries: 15
    delay: 10

  - name: Check if the stats resolution has been set
    shell: oc get rc/heapster -o json | grep resolution
    register: resolution_out
    ignore_errors: true

  - name: Patch the heapster RC
    command: oc patch rc/heapster -p '{"spec":{"template":{"spec":{"containers":[{"name":"heapster","image":"registry.access.redhat.com/openshift3/metrics-heapster:3.2.0","command":["heapster-wrapper.sh","--wrapper.username_file=/hawkular-account/hawkular-metrics.username","--wrapper.password_file=/hawkular-account/hawkular-metrics.password","--wrapper.allowed_users_file=/secrets/heapster.allowed-users","--wrapper.endpoint_check=https://hawkular-metrics:443/hawkular/metrics/status","--source=kubernetes:https://kubernetes.default.svc:443?useServiceAccount=true&kubeletHttps=true&kubeletPort=10250","--sink=hawkular:https://hawkular-metrics:443?tenant=_system&labelToTenant=pod_namespace&labelNodeId=nodename&caCert=/hawkular-cert/hawkular-metrics-ca.certificate&user=%username%&pass=%password%&filter=label(container_name:^/system.slice.*|^/user.slice)","--tls_cert=/secrets/heapster.cert","--tls_key=/secrets/heapster.key","--tls_client_ca=/secrets/heapster.client-ca","--allowed_users=%allowed_users%","--stats_resolution=30s"],"ports":[{"name":"http-endpoint","containerPort":8082,"protocol":"TCP"}],"resources":{},"volumeMounts":[{"name":"heapster-secrets","mountPath":"/secrets"},{"name":"hawkular-metrics-certificate","mountPath":"/hawkular-cert"},{"name":"hawkular-metrics-account","mountPath":"/hawkular-account"}],"readinessProbe":{"exec":{"command":["/opt/heapster-readiness.sh"]},"timeoutSeconds":1,"periodSeconds":10,"successThreshold":1,"failureThreshold":3},"terminationMessagePath":"/dev/termination-log","imagePullPolicy":"IfNotPresent"}]}}}}'
    when: resolution_out | failed

  - name: Find the heapster pod
    shell: oc get pod | awk '/heapster/{ print $1 }'
    register: heapster_pod_out

  - name: Kill the heapster pod
    shell: oc delete pod {{ heapster_pod_out.stdout }}

  - name: Wait for old heapster pod to be gone
    shell: oc get pod | grep {{ heapster_pod_out.stdout }}
    register: metrics_pods_out
    until: metrics_pods_out | failed
    retries: 15
    delay: 10
    ignore_errors: true

  - name: Wait for new heapster pod to be running
    shell: oc get pod | grep heapster | grep -i unning
    register: heapster_running_out
    until: heapster_running_out | success
    retries: 15
    delay: 10
    ignore_errors: true
